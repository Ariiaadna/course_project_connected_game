extends Node

@onready var text_box_scene = preload("res://scenese/text_box.tscn")

var player_say: String = ""
var dialog_lines: Array[String] = []
var current_line_index = 0

var text_box
var text_box_position: Vector2

var is_dialog_active = false
var can_advance_line = false

var position
var ai_position : Vector2
var player_position: Vector2
var is_player_talk: bool

# thinking state
var thinking: bool = false
var thinking_timer: Timer = null
var thinking_dots: int = 0
const THINK_BASE_TEXT := "–¥—É–º–∞–µ—Ç"

#func start_dialog(position: Vector2, lines: Array[String]):
func start_dialog(lines: Array[String]):
	if is_player_talk:
		position = player_position
	else:
		position = ai_position
	if is_dialog_active:
		return 
	dialog_lines = lines
	text_box_position = position
	_show_text_box()
	
	is_dialog_active = true

func _show_text_box():
	# –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å
	if text_box and text_box.is_inside_tree():
		text_box.queue_free()
	text_box = text_box_scene.instantiate()
	text_box.finished_displaying.connect(_on_text_box_finished_displaying)
	get_tree().root.add_child(text_box)
	text_box.global_position = text_box_position
	text_box.display_text(dialog_lines[current_line_index])
	can_advance_line = false
	
func _on_text_box_finished_displaying():
	can_advance_line = true

func _unhandled_input(event):
	# –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ –≤–æ –≤—Ä–µ–º—è –º—ã—Å–ª–∏
	if thinking:
		return

	
	if (
		event.is_action_pressed("advance_dialog") &&
		is_dialog_active &&
		can_advance_line
	):
		text_box.queue_free()
		current_line_index += 1
		
		if current_line_index >= dialog_lines.size():
			is_dialog_active = false 
			current_line_index = 0
			return
			
		_show_text_box()


func clean_message(msg: String) -> void:
	# 1. –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ <think>...</think>
	while true:
		var start := msg.find("<think>")
		var end := msg.find("</think>")
		if start == -1 or end == -1:
			break
		msg = msg.substr(0, start) + msg.substr(end + 8) # 8 —Å–∏–º–≤–æ–ª–æ–≤ –≤ "</think>"

	# 2. –£–±–∏—Ä–∞–µ–º –Ω–µ—á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –±–∞–∑–æ–≤—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é)
	var allowed := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø0123456789 .,!?;:-()"
	var clean_text := ""
	for c in msg:
		if allowed.find(c) != -1:
			clean_text += c

	
	# 3. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
	var sentences: Array[String] = []
	var current := ""
	for c in clean_text:
		current += c
		if c == "." or c == "!" or c == "?":
			var sentence := current.strip_edges()
			if sentence != "":
				sentences.append(sentence)
			current = ""
	# –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
	if current.strip_edges() != "":
		sentences.append(current.strip_edges())
	
	start_dialog(sentences)
	
# =========================
# üí≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–¥—É–º–∞–µ—Ç..."
# =========================
func show_thinking():
	if thinking:
		return # —É–∂–µ –¥—É–º–∞–µ—Ç
	
	# –ü–æ–º–µ—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–≤–æ–¥
	thinking = true
	is_dialog_active = true
	can_advance_line = false
	thinking_dots = 0

	# –°–æ–∑–¥–∞—ë–º text box, –Ω–æ –ù–ï —á–µ—Ä–µ–∑ display_text (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ-–±—É–∫–≤–µ–Ω–Ω—É—é –ø–µ—á–∞—Ç—å)
	text_box = text_box_scene.instantiate()
	get_tree().root.add_child(text_box)
	text_box.global_position = ai_position
	text_box.global_position.x -= text_box.size.x + 4
	text_box.global_position.y -= text_box.size.y + 24

	# –ü–∏—à–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É (label –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∏–Ω—Å—Ç–∞–Ω—Å–µ text_box)
	# –ï—Å–ª–∏ –≤ text_box.label –ø—É—Ç—å –¥—Ä—É–≥–æ–π ‚Äî –ø–æ–º–µ–Ω—è–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
	if text_box.has_node("MarginContainer/Label"):
		text_box.get_node("MarginContainer/Label").text = THINK_BASE_TEXT
	else:
		# –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ
		if text_box.has_variable("label"):
			text_box.label.text = THINK_BASE_TEXT

	# –°–æ–∑–¥–∞—ë–º —Ç–∞–π–º–µ—Ä (–æ–¥–∏–Ω —Ä–∞–∑)
	if thinking_timer != null and thinking_timer.is_inside_tree():
		thinking_timer.queue_free()
	thinking_timer = Timer.new()
	thinking_timer.wait_time = 0.5
	thinking_timer.one_shot = false
	add_child(thinking_timer)
	thinking_timer.connect("timeout", Callable(self, "_on_thinking_timeout"))
	thinking_timer.start()

func _on_thinking_timeout():
	# —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ 0..3 (0 = –Ω–µ—Ç —Ç–æ—á–µ–∫)
	thinking_dots = (thinking_dots + 1) % 4
	var dots_text := ".".repeat(thinking_dots)
	var full := THINK_BASE_TEXT + dots_text

	# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É
	if text_box:
		if text_box.has_node("MarginContainer/Label"):
			text_box.get_node("MarginContainer/Label").text = full
		elif text_box.has_variable("label"):
			text_box.label.text = full

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–¥—É–º–∞–µ—Ç..." –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤
func stop_thinking():
	if not thinking:
		return

	thinking = false
	is_dialog_active = false
	can_advance_line = false

	if thinking_timer:
		thinking_timer.stop()
		thinking_timer.queue_free()
		thinking_timer = null

	if text_box and text_box.is_inside_tree():
		text_box.queue_free()
		text_box = null


func set_player_say(what_say: String) -> void: 
	player_say = what_say
	print ("what_say = ", what_say, " player_say = ", player_say)

func get_player_say() -> String: 
	print (" player_say = ", player_say)
	return player_say 
	
